apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: messageservice
  name: messageservice
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: messageservice
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/database_network: "true"
        io.kompose.network/frontend_network: "true"
        io.kompose.network/service_network: "true"
        io.kompose.service: messageservice
    spec:
      hostAliases:
        - ip: {{ .Values.global.dockerHostIp }}
          hostnames:
            - {{ .Values.global.domainName }}
      initContainers:
        - name: wait-for-rocketchat
          image: busybox
          command: [ "sh", "-c", "until nc -z rocketchat 3000 > /dev/null; do echo Waiting for rocketchat.; sleep 5; done;"]
      containers:
        - env:
            - name: APP_BASE_URL
              valueFrom:
                configMapKeyRef:
                  key: APP_BASE_URL
                  name: messageservice-{{ .Release.Name }}-env
            - name: CSRF_COOKIE_PROPERTY
              valueFrom:
                configMapKeyRef:
                  key: CSRF_COOKIE_PROPERTY
                  name: messageservice-{{ .Release.Name }}-env
            - name: CSRF_HEADER_PROPERTY
              valueFrom:
                configMapKeyRef:
                  key: CSRF_HEADER_PROPERTY
                  name: messageservice-{{ .Release.Name }}-env
            - name: CSRF_WHITELIST_HEADER_PROPERTY
              valueFrom:
                configMapKeyRef:
                  key: CSRF_WHITELIST_HEADER_PROPERTY
                  name: messageservice-{{ .Release.Name }}-env
            - name: KEYCLOAK_CORS
              valueFrom:
                configMapKeyRef:
                  key: KEYCLOAK_CORS
                  name: messageservice-{{ .Release.Name }}-env
            - name: KEYCLOAKSERVICE_ADMIN_CLIENTID
              valueFrom:
                configMapKeyRef:
                  key: KEYCLOAKSERVICE_ADMIN_CLIENTID
                  name: messageservice-{{ .Release.Name }}-env
            - name: KEYCLOAKSERVICE_APP_CLIENTID
              valueFrom:
                configMapKeyRef:
                  key: KEYCLOAKSERVICE_APP_CLIENTID
                  name: messageservice-{{ .Release.Name }}-env
            - name: KEYCLOAK_AUTH_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  key: KEYCLOAK_AUTH_SERVER_URL
                  name: messageservice-{{ .Release.Name }}-env
            - name: KEYCLOAK_PRINCIPAL_ATTRIBUTE
              valueFrom:
                configMapKeyRef:
                  key: KEYCLOAK_PRINCIPAL_ATTRIBUTE
                  name: messageservice-{{ .Release.Name }}-env
            - name: KEYCLOAK_REALM
              valueFrom:
                configMapKeyRef:
                  key: KEYCLOAK_REALM
                  name: messageservice-{{ .Release.Name }}-env
            - name: KEYCLOAK_RESOURCE
              valueFrom:
                configMapKeyRef:
                  key: KEYCLOAK_RESOURCE
                  name: messageservice-{{ .Release.Name }}-env
            - name: ROCKET_CHAT_API_URL
              valueFrom:
                configMapKeyRef:
                  key: ROCKET_CHAT_API_URL
                  name: messageservice-{{ .Release.Name }}-env
            - name: ROCKET_CREDENTIALSCHEDULER_CRON
              valueFrom:
                configMapKeyRef:
                  key: ROCKET_CREDENTIALSCHEDULER_CRON
                  name: messageservice-{{ .Release.Name }}-env
            - name: ROCKET_SYSTEMUSER_ID
              valueFrom:
                configMapKeyRef:
                  key: ROCKET_SYSTEMUSER_ID
                  name: messageservice-{{ .Release.Name }}-env
            - name: ROCKET_SYSTEMUSER_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: ROCKET_SYSTEMUSER_PASSWORD
                  name: messageservice-secret-{{ .Release.Name }}-env
            - name: ROCKET_SYSTEMUSER_USERNAME
              valueFrom:
                secretKeyRef:
                  key: ROCKET_SYSTEMUSER_USERNAME
                  name: messageservice-secret-{{ .Release.Name }}-env
            - name: ROCKET_TECHNICAL_USERNAME
              valueFrom:
                secretKeyRef:
                  key: ROCKET_TECHNICAL_USERNAME
                  name: messageservice-secret-{{ .Release.Name }}-env
            - name: ROCKET_TECHNICAL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: ROCKET_TECHNICAL_PASSWORD
                  name: messageservice-secret-{{ .Release.Name }}-env
            - name: SERVICE_ENCRYPTION_APPKEY
              valueFrom:
                secretKeyRef:
                  key: SERVICE_ENCRYPTION_APPKEY
                  name: messageservice-secret-{{ .Release.Name }}-env
            - name: SPRING_DATASOURCE_URL
              valueFrom:
                configMapKeyRef:
                  key: SPRING_DATASOURCE_URL
                  name: messageservice-{{ .Release.Name }}-env
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: MESSAGESERVICE_SPRING_DATASOURCE_PASSWORD
                  name: messageservice-secret-{{ .Release.Name }}-env
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  key: MESSAGESERVICE_SPRING_DATASOURCE_USERNAME
                  name: messageservice-secret-{{ .Release.Name }}-env
            - name: SPRING_LIQUIBASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: SPRING_LIQUIBASE_PASSWORD
                  name: messageservice-secret-{{ .Release.Name }}-env
            - name: SPRING_LIQUIBASE_USER
              valueFrom:
                secretKeyRef:
                  key: SPRING_LIQUIBASE_USER
                  name: messageservice-secret-{{ .Release.Name }}-env
            - name: SPRING_PROFILES_ACTIVE
              valueFrom:
                configMapKeyRef:
                  key: SPRING_PROFILES_ACTIVE
                  name: messageservice-{{ .Release.Name }}-env
            - name: USER_SERVICE_API_LIVEPROXY_URL
              valueFrom:
                configMapKeyRef:
                  key: USER_SERVICE_API_LIVEPROXY_URL
                  name: messageservice-{{ .Release.Name }}-env
            - name: USER_SERVICE_API_URL
              valueFrom:
                configMapKeyRef:
                  key: USER_SERVICE_API_URL
                  name: messageservice-{{ .Release.Name }}-env
            - name: MULTITENANCY_ENABLED
              valueFrom:
                configMapKeyRef:
                  key: MULTITENANCY_ENABLED
                  name: messageservice-{{ .Release.Name }}-env
            - name: TENANT_SERVICE_API_URL
              valueFrom:
                configMapKeyRef:
                  key: TENANT_SERVICE_API_URL
                  name: messageservice-{{ .Release.Name }}-env
            - name: STATISTICS_ENABLED
              valueFrom:
                configMapKeyRef:
                  key: STATISTICS_ENABLED
                  name: messageservice-{{ .Release.Name }}-env
            - name: SPRING_RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  key: SPRING_RABBITMQ_USERNAME
                  name: statisticsservice-secret-{{ .Release.Name }}-env
            - name: SPRING_RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: SPRING_RABBITMQ_PASSWORD
                  name: statisticsservice-secret-{{ .Release.Name }}-env
            - name: FEATURE_MULTITENANCY_WITH_SINGLE_DOMAIN_ENABLED
              valueFrom:
                configMapKeyRef:
                  key: FEATURE_MULTITENANCY_WITH_SINGLE_DOMAIN_ENABLED
                  name: messageservice-{{ .Release.Name }}-env
            - name: MANAGEMENT_ZIPKIN_TRACING_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  key: MANAGEMENT_ZIPKIN_TRACING_ENDPOINT
                  name: messageservice-{{ .Release.Name }}-env
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURI
              valueFrom:
                configMapKeyRef:
                  key: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURI
                  name: messageservice-{{ .Release.Name }}-env
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWKSETURI
              valueFrom:
                configMapKeyRef:
                  key: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWKSETURI
                  name: messageservice-{{ .Release.Name }}-env
            - name: SPRING_JWT_AUTH_CONVERTER_RESOURCEID
              valueFrom:
                configMapKeyRef:
                  key: SPRING_JWT_AUTH_CONVERTER_RESOURCEID
                  name: messageservice-{{ .Release.Name }}-env
            {{- if .Values.global.sentryEnabled }}
            - name: SENTRY_ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  key: SENTRY_ENVIRONMENT
                  name: messageservice-{{ .Release.Name }}-env
            - name: SENTRY_SAMPLE_RATE
              valueFrom:
                configMapKeyRef:
                  key: SENTRY_SAMPLE_RATE
                  name: messageservice-{{ .Release.Name }}-env
            - name: ONLINEBERATUNG_SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  key: SENTRY_DSN
                  name: messageservice-secret-{{ .Release.Name }}-env
            {{- end }}
          image: {{ .Values.messageServiceImageName }}:{{ .Values.messageServiceImageVersion }}
          imagePullPolicy: Always
          name: messageservice
          ports:
            - containerPort: 8080
          {{- if .Values.messageservice }}
          {{- if .Values.messageservice.resources }}
          resources:
            {{- if .Values.messageservice.resources.requests }}
            requests:
              {{- if .Values.messageservice.resources.requests.memory }}
              memory: {{  .Values.messageservice.resources.requests.memory }}
              {{- end}}
              {{- if .Values.messageservice.resources.requests.cpu }}
              cpu: {{ .Values.messageservice.resources.requests.cpu }}
              {{- end}}
            {{- end }}
            {{- if .Values.messageservice.resources.limits }}
            limits:
              {{- if .Values.messageservice.resources.limits.memory }}
              memory: {{ .Values.messageservice.resources.limits.memory }}
              {{- end}}
              {{- if .Values.messageservice.resources.limits.cpu }}
              cpu: {{ .Values.messageservice.resources.limits.cpu }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- end }}
        - name: set-masterkey
          image: badouralix/curl-jq
          env:
            - name: KEYCLOAKSERVICE_TECHNICAL_USERNAME
              valueFrom:
                secretKeyRef:
                  key: KEYCLOAKSERVICE_TECHNICAL_USERNAME
                  name: userservice-secret-{{ .Release.Name }}-env
            - name: KEYCLOAKSERVICE_TECHNICAL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KEYCLOAKSERVICE_TECHNICAL_PASSWORD
                  name: userservice-secret-{{ .Release.Name }}-env
            - name: KEYCLOAK_AUTH_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  key: KEYCLOAK_AUTH_SERVER_URL
                  name: messageservice-{{ .Release.Name }}-env
            - name: CSRF_HEADER_PROPERTY
              valueFrom:
                configMapKeyRef:
                  key: CSRF_HEADER_PROPERTY
                  name: messageservice-{{ .Release.Name }}-env
            - name: CSRF_COOKIE_PROPERTY
              valueFrom:
                configMapKeyRef:
                  key: CSRF_COOKIE_PROPERTY
                  name: messageservice-{{ .Release.Name }}-env
            - name: MASTERKEY
              valueFrom:
                secretKeyRef:
                  key: MASTERKEY
                  name: masterkey-secret-{{ .Release.Name }}-env
          command:
            - sh
            - -c
            - >
              until nc -z keycloak 8080 > /dev/null; do echo Waiting for keycloak.; sleep 5; done;
              until nc -z $HOSTNAME 8080 > /dev/null; do echo Waiting for $HOSTNAME.; sleep 5; done;
              ACCESS_TOKEN=`curl --data-urlencode "grant_type=password" --data-urlencode "client_id=app" --data-urlencode "username=$KEYCLOAKSERVICE_TECHNICAL_USERNAME" --data-urlencode "password=$KEYCLOAKSERVICE_TECHNICAL_PASSWORD" $KEYCLOAK_AUTH_SERVER_URL/realms/online-beratung/protocol/openid-connect/token | jq -r '.access_token'`;
              MASTERKEY_JSON={\"masterKey\":\"$MASTERKEY\"};
              RESPONSE_STATUS=`curl -H "Authorization: Bearer $ACCESS_TOKEN" -H "$CSRF_HEADER_PROPERTY:default" --cookie "$CSRF_COOKIE_PROPERTY=default" http://$HOSTNAME:8080/messages/key -X POST -H "Content-Type:application/json" -d $MASTERKEY_JSON -w '%{http_code}'`;
              if [ $RESPONSE_STATUS -eq 200 ]; then
                while true; do echo 'Masterkey is set'; sleep 5000; done;
              fi;
          resources: {}
      imagePullSecrets:
        - name: registry-secret
      restartPolicy: Always